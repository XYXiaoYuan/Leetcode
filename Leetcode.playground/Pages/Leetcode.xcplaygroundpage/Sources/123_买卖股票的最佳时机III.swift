/**
 https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/
 
 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

  

 示例 1:

 输入：prices = [3,3,5,0,0,3,1,4]
 输出：6
 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
      随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 示例 2：

 输入：prices = [1,2,3,4,5]
 输出：4
 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
      注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
      因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 示例 3：

 输入：prices = [7,6,4,3,1]
 输出：0
 解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
 示例 4：

 输入：prices = [1]
 输出：0
  

 提示：

 1 <= prices.length <= 105
 0 <= prices[i] <= 105


 来源：力扣（LeetCode）
 链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii
 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */

/**
 k = 2 k = 2 和前⾯题⽬的情况稍微不同，
 因为上⾯的情况都和 k 的关系不太⼤。
 要么 k 是正⽆穷，状态转移和 k 没关系了；
 要么 k = 1，跟 k = 0 这个 base case 挨得近，最后也没有存在感。
 这道题由于没有消掉 k 的影响，所以必须要对 k 进⾏穷举：
 
 这⾥ k 取值范围⽐较⼩，所以可以不⽤ for 循环，直接把 k = 1 和 2 的情况 全部列举出来也可以：
 有状态转移⽅程和含义明确的变量名指导，相信你很容易看懂。其实我们可 以故弄⽞虚，把上述四个变量换成 a, b, c, d。这样当别⼈看到你的代码时就 会⼤惊失⾊，对你肃然起敬。
 */


public class _123_买卖股票的最佳时机III {
//class Solution {
    public init() {}
    
    public func maxProfit(_ prices: [Int]) -> Int {
        var dp_i10 = 0, dp_i11 = Int.min;
        var dp_i20 = 0, dp_i21 = Int.min;
        for price in prices {
            dp_i20 = max(dp_i20, dp_i21 + price)
            dp_i21 = max(dp_i21, dp_i10 - price)
            dp_i10 = max(dp_i10, dp_i11 + price)
            dp_i11 = max(dp_i11, -price)
        }
        return dp_i20
    }
}
